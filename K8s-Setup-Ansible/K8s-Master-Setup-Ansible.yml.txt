---
 - name: Installing and Configuring Kubernetes Cluster
   hosts: kmaster
   gather_facts: true

   tasks:
     - name: Prerequstites of Kubernetes Cluster for RedHat
       shell: |
               swapoff -av
               sed -i '/\bswap\b/ s/^/#/' /etc/fstab
               sed -i s/^SELINUX=enforcing/SELINUX=disabled/g /etc/selinux/config
               sed -i s/^SELINUX=permissive/SELINUX=disabled/g /etc/selinux/config
               systemctl disable firewalld
               systemctl stop firewalld
               modprobe br_netfilter
               touch /etc/yum.repos.d/C7.repo
               touch /etc/yum.repos.d/K8s.repo
       when: ansible_facts['os_family'] == "RedHat"


     - name: Prerequstites of Kubernetes Cluster for Ubuntu
       shell: |
               swapoff -av
               sed -i '/\bswap\b/ s/^/#/' /etc/fstab
               ufw disable
               mkdir /etc/docker
               touch /etc/docker/daemon.json
               cat << EOF > /etc/docker/daemon.json
               {
                "exec-opts": ["native.cgroupdriver=systemd"]
               }
               EOF
       when: ansible_facts['os_family'] == "Debian"


     - name: Prequest completed rebooting Server and after continue task
       shell: reboot
       async: 1
       poll: 0
#       when: ansible_facts['os_family'] == "RedHat"
#       when: ansible_facts['os_family'] == "Debian"


     - name: Waiting for server back online
       wait_for_connection:
         connect_timeout: 20
         sleep: 5
         delay: 5
         timeout: 300
#       when: ansible_facts['os_family'] == "RedHat"
#       when: ansible_facts['os_family'] == "Debian"


     - name: Adding Docker & K8s repo for Ubuntu
       shell: |
               apt update -y
               apt install apt-transport-https ca-certificates curl software-properties-common -y
               curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
               add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
               curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
               apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
               apt update -y
       when: ansible_facts['os_family'] == "Debian"


     - name: Adding C7 repo for RedHat
       blockinfile:
         dest: /etc/yum.repos.d/C7.repo
         block:
               |
                [centos]
                name= cent7
                baseurl= http://centos.mirror.snu.edu.in/centos/7/os/x86_64/
                enabled= 1
                gpgcheck= 0

                [extras]
                name= extras
                baseurl= http://centos.mirror.snu.edu.in/centos/7/extras/x86_64/
                enabled= 1
                gpgcheck= 0
       when: ansible_facts['os_family'] == "RedHat"


     - name: Adding K8s repo for RedHat
       blockinfile:
         dest: /etc/yum.repos.d/K8s.repo
         block:
               |
                [kubernetes]
                name=Kubernetes
                baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
                enabled=1
                gpgcheck=1
                repo_gpgcheck=1
                gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
                       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
       when: ansible_facts['os_family'] == "RedHat"


     - name: Installing kubernetes and docker packages for RedHat
       yum:
         name: "{{ item }}"
         state: latest
       with_items:
         - docker
         - kubeadm
         - kubectl
         - kubelet
         - sshpass
       when: ansible_facts['os_family'] == "RedHat"


     - name: Installing Kubernetes and docker packages for Ubuntu
       apt:
         name: "{{ item }}"
         state: latest
       with_items:
         - docker-ce
         - kubeadm
         - kubectl
         - kubelet
         - sshpass
       when: ansible_facts['os_family'] == "Debian"


     - name: Configuring Kubernetes Cluster for RedHat
       shell: |
               systemctl enable docker kubelet
               systemctl start docker kubelet
               echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
               echo 1 > /proc/sys/net/bridge/bridge-nf-call-iptables
               kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=all > /tmp/kube.outs
               mkdir -p $HOME/.kube
               cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
               chown $(id -u):$(id -g) $HOME/.kube/config
               kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.12.0/Documentation/kube-flannel.yml
       when: ansible_facts['os_family'] == "RedHat"


     - name: Configuring Kubernetes Cluster for Ubuntu
       shell: |
               systemctl enable docker kubelet
               systemctl start docker kubelet
               kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=all > /tmp/kube.outs
               mkdir -p $HOME/.kube
               cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
               chown $(id -u):$(id -g) $HOME/.kube/config
               kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/v0.12.0/Documentation/kube-flannel.yml
       when: ansible_facts['os_family'] == "Debian"


     - name: Generate API token for Kubernetes worker nodes and copy the token to workers nodes
       shell: |
               kubeadm token create --print-join-command > /etc/kubernetes/joincluster.sh 2>/dev/null
               sshpass -p " " scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /etc/kubernetes/joincluster.sh root@kworker1:/tmp/ 2>/dev/null
               sshpass -p " " scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no /etc/kubernetes/joincluster.sh root@kworker2:/tmp/ 2>/dev/null


     - debug:
         msg: Cluster is ready to use
